// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: downloader/v1/downloader.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/redstash/generated/downloader/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DownloaderServiceName is the fully-qualified name of the DownloaderService service.
	DownloaderServiceName = "downloader.v1.DownloaderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DownloaderServiceTriggerDownloaderProcedure is the fully-qualified name of the
	// DownloaderService's TriggerDownloader RPC.
	DownloaderServiceTriggerDownloaderProcedure = "/downloader.v1.DownloaderService/TriggerDownloader"
)

// DownloaderServiceClient is a client for the downloader.v1.DownloaderService service.
type DownloaderServiceClient interface {
	TriggerDownloader(context.Context, *connect.Request[v1.TriggerDownloaderRequest]) (*connect.Response[v1.TriggerDownloaderResponse], error)
}

// NewDownloaderServiceClient constructs a client for the downloader.v1.DownloaderService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDownloaderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DownloaderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	downloaderServiceMethods := v1.File_downloader_v1_downloader_proto.Services().ByName("DownloaderService").Methods()
	return &downloaderServiceClient{
		triggerDownloader: connect.NewClient[v1.TriggerDownloaderRequest, v1.TriggerDownloaderResponse](
			httpClient,
			baseURL+DownloaderServiceTriggerDownloaderProcedure,
			connect.WithSchema(downloaderServiceMethods.ByName("TriggerDownloader")),
			connect.WithClientOptions(opts...),
		),
	}
}

// downloaderServiceClient implements DownloaderServiceClient.
type downloaderServiceClient struct {
	triggerDownloader *connect.Client[v1.TriggerDownloaderRequest, v1.TriggerDownloaderResponse]
}

// TriggerDownloader calls downloader.v1.DownloaderService.TriggerDownloader.
func (c *downloaderServiceClient) TriggerDownloader(ctx context.Context, req *connect.Request[v1.TriggerDownloaderRequest]) (*connect.Response[v1.TriggerDownloaderResponse], error) {
	return c.triggerDownloader.CallUnary(ctx, req)
}

// DownloaderServiceHandler is an implementation of the downloader.v1.DownloaderService service.
type DownloaderServiceHandler interface {
	TriggerDownloader(context.Context, *connect.Request[v1.TriggerDownloaderRequest]) (*connect.Response[v1.TriggerDownloaderResponse], error)
}

// NewDownloaderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDownloaderServiceHandler(svc DownloaderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	downloaderServiceMethods := v1.File_downloader_v1_downloader_proto.Services().ByName("DownloaderService").Methods()
	downloaderServiceTriggerDownloaderHandler := connect.NewUnaryHandler(
		DownloaderServiceTriggerDownloaderProcedure,
		svc.TriggerDownloader,
		connect.WithSchema(downloaderServiceMethods.ByName("TriggerDownloader")),
		connect.WithHandlerOptions(opts...),
	)
	return "/downloader.v1.DownloaderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DownloaderServiceTriggerDownloaderProcedure:
			downloaderServiceTriggerDownloaderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDownloaderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDownloaderServiceHandler struct{}

func (UnimplementedDownloaderServiceHandler) TriggerDownloader(context.Context, *connect.Request[v1.TriggerDownloaderRequest]) (*connect.Response[v1.TriggerDownloaderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("downloader.v1.DownloaderService.TriggerDownloader is not implemented"))
}
