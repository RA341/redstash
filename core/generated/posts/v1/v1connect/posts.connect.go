// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: posts/v1/posts.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/redstash/generated/posts/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostsServiceName is the fully-qualified name of the PostsService service.
	PostsServiceName = "posts.v1.PostsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostsServiceListDownloadedProcedure is the fully-qualified name of the PostsService's
	// ListDownloaded RPC.
	PostsServiceListDownloadedProcedure = "/posts.v1.PostsService/ListDownloaded"
)

// PostsServiceClient is a client for the posts.v1.PostsService service.
type PostsServiceClient interface {
	ListDownloaded(context.Context, *connect.Request[v1.ListDownloadedRequest]) (*connect.Response[v1.ListDownloadedResponse], error)
}

// NewPostsServiceClient constructs a client for the posts.v1.PostsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	postsServiceMethods := v1.File_posts_v1_posts_proto.Services().ByName("PostsService").Methods()
	return &postsServiceClient{
		listDownloaded: connect.NewClient[v1.ListDownloadedRequest, v1.ListDownloadedResponse](
			httpClient,
			baseURL+PostsServiceListDownloadedProcedure,
			connect.WithSchema(postsServiceMethods.ByName("ListDownloaded")),
			connect.WithClientOptions(opts...),
		),
	}
}

// postsServiceClient implements PostsServiceClient.
type postsServiceClient struct {
	listDownloaded *connect.Client[v1.ListDownloadedRequest, v1.ListDownloadedResponse]
}

// ListDownloaded calls posts.v1.PostsService.ListDownloaded.
func (c *postsServiceClient) ListDownloaded(ctx context.Context, req *connect.Request[v1.ListDownloadedRequest]) (*connect.Response[v1.ListDownloadedResponse], error) {
	return c.listDownloaded.CallUnary(ctx, req)
}

// PostsServiceHandler is an implementation of the posts.v1.PostsService service.
type PostsServiceHandler interface {
	ListDownloaded(context.Context, *connect.Request[v1.ListDownloadedRequest]) (*connect.Response[v1.ListDownloadedResponse], error)
}

// NewPostsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostsServiceHandler(svc PostsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	postsServiceMethods := v1.File_posts_v1_posts_proto.Services().ByName("PostsService").Methods()
	postsServiceListDownloadedHandler := connect.NewUnaryHandler(
		PostsServiceListDownloadedProcedure,
		svc.ListDownloaded,
		connect.WithSchema(postsServiceMethods.ByName("ListDownloaded")),
		connect.WithHandlerOptions(opts...),
	)
	return "/posts.v1.PostsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostsServiceListDownloadedProcedure:
			postsServiceListDownloadedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostsServiceHandler struct{}

func (UnimplementedPostsServiceHandler) ListDownloaded(context.Context, *connect.Request[v1.ListDownloadedRequest]) (*connect.Response[v1.ListDownloadedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostsService.ListDownloaded is not implemented"))
}
