// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reddit/v1/reddit.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/redstash/generated/reddit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RedditServiceName is the fully-qualified name of the RedditService service.
	RedditServiceName = "reddit.v1.RedditService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RedditServiceAddAccountProcedure is the fully-qualified name of the RedditService's AddAccount
	// RPC.
	RedditServiceAddAccountProcedure = "/reddit.v1.RedditService/AddAccount"
	// RedditServiceDeleteAccountProcedure is the fully-qualified name of the RedditService's
	// DeleteAccount RPC.
	RedditServiceDeleteAccountProcedure = "/reddit.v1.RedditService/DeleteAccount"
	// RedditServiceListAccountProcedure is the fully-qualified name of the RedditService's ListAccount
	// RPC.
	RedditServiceListAccountProcedure = "/reddit.v1.RedditService/ListAccount"
	// RedditServiceRunTaskProcedure is the fully-qualified name of the RedditService's RunTask RPC.
	RedditServiceRunTaskProcedure = "/reddit.v1.RedditService/RunTask"
)

// RedditServiceClient is a client for the reddit.v1.RedditService service.
type RedditServiceClient interface {
	AddAccount(context.Context, *connect.Request[v1.AddAccountRequest]) (*connect.Response[v1.AddAccountResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	ListAccount(context.Context, *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error)
	RunTask(context.Context, *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunTaskResponse], error)
}

// NewRedditServiceClient constructs a client for the reddit.v1.RedditService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRedditServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RedditServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	redditServiceMethods := v1.File_reddit_v1_reddit_proto.Services().ByName("RedditService").Methods()
	return &redditServiceClient{
		addAccount: connect.NewClient[v1.AddAccountRequest, v1.AddAccountResponse](
			httpClient,
			baseURL+RedditServiceAddAccountProcedure,
			connect.WithSchema(redditServiceMethods.ByName("AddAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+RedditServiceDeleteAccountProcedure,
			connect.WithSchema(redditServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		listAccount: connect.NewClient[v1.ListAccountRequest, v1.ListAccountResponse](
			httpClient,
			baseURL+RedditServiceListAccountProcedure,
			connect.WithSchema(redditServiceMethods.ByName("ListAccount")),
			connect.WithClientOptions(opts...),
		),
		runTask: connect.NewClient[v1.RunTaskRequest, v1.RunTaskResponse](
			httpClient,
			baseURL+RedditServiceRunTaskProcedure,
			connect.WithSchema(redditServiceMethods.ByName("RunTask")),
			connect.WithClientOptions(opts...),
		),
	}
}

// redditServiceClient implements RedditServiceClient.
type redditServiceClient struct {
	addAccount    *connect.Client[v1.AddAccountRequest, v1.AddAccountResponse]
	deleteAccount *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	listAccount   *connect.Client[v1.ListAccountRequest, v1.ListAccountResponse]
	runTask       *connect.Client[v1.RunTaskRequest, v1.RunTaskResponse]
}

// AddAccount calls reddit.v1.RedditService.AddAccount.
func (c *redditServiceClient) AddAccount(ctx context.Context, req *connect.Request[v1.AddAccountRequest]) (*connect.Response[v1.AddAccountResponse], error) {
	return c.addAccount.CallUnary(ctx, req)
}

// DeleteAccount calls reddit.v1.RedditService.DeleteAccount.
func (c *redditServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// ListAccount calls reddit.v1.RedditService.ListAccount.
func (c *redditServiceClient) ListAccount(ctx context.Context, req *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error) {
	return c.listAccount.CallUnary(ctx, req)
}

// RunTask calls reddit.v1.RedditService.RunTask.
func (c *redditServiceClient) RunTask(ctx context.Context, req *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunTaskResponse], error) {
	return c.runTask.CallUnary(ctx, req)
}

// RedditServiceHandler is an implementation of the reddit.v1.RedditService service.
type RedditServiceHandler interface {
	AddAccount(context.Context, *connect.Request[v1.AddAccountRequest]) (*connect.Response[v1.AddAccountResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	ListAccount(context.Context, *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error)
	RunTask(context.Context, *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunTaskResponse], error)
}

// NewRedditServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRedditServiceHandler(svc RedditServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	redditServiceMethods := v1.File_reddit_v1_reddit_proto.Services().ByName("RedditService").Methods()
	redditServiceAddAccountHandler := connect.NewUnaryHandler(
		RedditServiceAddAccountProcedure,
		svc.AddAccount,
		connect.WithSchema(redditServiceMethods.ByName("AddAccount")),
		connect.WithHandlerOptions(opts...),
	)
	redditServiceDeleteAccountHandler := connect.NewUnaryHandler(
		RedditServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(redditServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	redditServiceListAccountHandler := connect.NewUnaryHandler(
		RedditServiceListAccountProcedure,
		svc.ListAccount,
		connect.WithSchema(redditServiceMethods.ByName("ListAccount")),
		connect.WithHandlerOptions(opts...),
	)
	redditServiceRunTaskHandler := connect.NewUnaryHandler(
		RedditServiceRunTaskProcedure,
		svc.RunTask,
		connect.WithSchema(redditServiceMethods.ByName("RunTask")),
		connect.WithHandlerOptions(opts...),
	)
	return "/reddit.v1.RedditService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RedditServiceAddAccountProcedure:
			redditServiceAddAccountHandler.ServeHTTP(w, r)
		case RedditServiceDeleteAccountProcedure:
			redditServiceDeleteAccountHandler.ServeHTTP(w, r)
		case RedditServiceListAccountProcedure:
			redditServiceListAccountHandler.ServeHTTP(w, r)
		case RedditServiceRunTaskProcedure:
			redditServiceRunTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRedditServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRedditServiceHandler struct{}

func (UnimplementedRedditServiceHandler) AddAccount(context.Context, *connect.Request[v1.AddAccountRequest]) (*connect.Response[v1.AddAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reddit.v1.RedditService.AddAccount is not implemented"))
}

func (UnimplementedRedditServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reddit.v1.RedditService.DeleteAccount is not implemented"))
}

func (UnimplementedRedditServiceHandler) ListAccount(context.Context, *connect.Request[v1.ListAccountRequest]) (*connect.Response[v1.ListAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reddit.v1.RedditService.ListAccount is not implemented"))
}

func (UnimplementedRedditServiceHandler) RunTask(context.Context, *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reddit.v1.RedditService.RunTask is not implemented"))
}
